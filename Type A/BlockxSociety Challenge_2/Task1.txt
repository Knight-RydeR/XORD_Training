pragma solidity 0.8.1;
//"SPDX-License-Identifier:UNLICENSED";

interface ERC20Token {

    function totalSupply() external returns (uint256 supply);

    function balanceOf(address _owner) external returns (uint256 balance);

    function transfer(address _to, uint256 _value) external returns (bool success);

    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);

    function approve(address _spender, uint256 _value) external returns (bool success);

    function allowance(address _owner, address _spender) external returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract MyToken is ERC20Token{
    
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    uint256 public override totalSupply;
    
    function transfer(address _to, uint256 _value) override external returns (bool success) {
        require (balances[msg.sender] >= _value && _value > 0);
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            emit Transfer(msg.sender, _to, _value);
            return true;
       }
    
    function transferFrom(address _from, address _to, uint256 _value) override external returns (bool success) {
    require (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0); 
        balances[_to] += _value;
        balances[_from] -= _value;
        allowed[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
}

    function balanceOf(address _owner) override external view returns (uint256 balance) {
      return balances[_owner];
  }
  
  function approve(address _spender, uint256 _value) override external returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

function allowance(address _owner, address _spender) override external view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
}

contract Challenge_1 is MyToken {
    
    fallback() external {
        revert();
    }
    string public name;
    uint8 public decimals;
    string public symbol;
    address public handler;
    
    constructor( // should have the same name as the contract name
        ) {
        balances[msg.sender] = 1000;    // creator gets all initial tokens
        totalSupply = 1000;             // total supply of token
        name = "RydeR Coin";               // name of token
        decimals = 0;                  // amount of decimals
        symbol = "ENLT";                // symbol of token
        handler = msg.sender;
    }
    
    function makeToken(address _receiver, uint _amount) public {
        require (msg.sender == handler);
        totalSupply += _amount;
        balances[_receiver] += _amount;
    }
    
    // function sendToken(address _to, uint _amount) external {
    //     if (balances[msg.sender] > _amount) {
    //         balances[_to] += _amount;
    //         balances[msg.sender] -= _amount;
    //         emit Transfer(msg.sender, _to, _amount);
    //     }
        
    }
    /* Approves and then calls the receiving contract */
    // function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) external returns (bool success) {
    //     allowed[msg.sender][_spender] = _value;
    //     Approval(msg.sender, _spender, _value);

    //     if(!_spender.call(bytes4(bytes32(keccak256(abi.encodeWithSelector("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData))) { revert(); }
    //     return true;
    // }