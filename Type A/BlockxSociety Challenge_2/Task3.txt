pragma solidity 0.8.4;
//"SPDX-License-Identifier:UNLICENSED";

interface IERC223 {
    /**
     * @dev Returns the total supply of the token.
     */
    //uint public _totalSupply;
    
    /**
     * @dev Returns the balance of the `who` address.
     */
    function balanceOf(address who) external view returns (uint);
        
    /**
     * @dev Transfers `value` tokens from `msg.sender` to `to` address
     * and returns `true` on success.
     */
    function transfer(address to, uint value) external returns (bool success);
        
    /**
     * @dev Transfers `value` tokens from `msg.sender` to `to` address with `data` parameter
     * and returns `true` on success.
     */
    //function transfer(address to, uint value, bytes memory data) external returns (bool success);
     
     /**
     * @dev Event that is fired on successful transfer.
     */
    event Transfer(address indexed from, address indexed to, uint value, bytes data);
}

interface IERC223Recipient { 
/**
 * @dev Standard ERC223 function that will handle incoming token transfers.
 *
 * @param _from  Token sender address.
 * @param _value Amount of tokens.
 * @param _data  Transaction metadata.
 */
    function tokenFallback(address _from, uint _value, bytes memory _data) external;
}

contract receiver is IERC223Recipient {
    function tokenFallback(address _from, uint _value, bytes memory _data) override external {
        
    }
}
 contract Challenge_3 is IERC223 {
     
    mapping (address => uint) balances;
    
    function transfer( address _to, uint _value) override external returns (bool success) {
        require(balances[msg.sender] > 0, "Insufficient funds");
        balances[_to] += _value;
        balances[msg.sender] -= _value;
        return true;
    }
    
    function balanceOf(address who) override external view returns (uint) {
        return address(who).balance;
    }
}